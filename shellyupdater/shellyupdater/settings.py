"""
Django settings for shellyupdater project.

Generated by 'django-admin startproject' using Django 1.11.13.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import environ
import logging.config

from .logfilter import skip_logentry_startswith


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Get local settings from .env file
env = environ.Env()
# reading .env file
env.read_env()
DEBUG = env.bool('DEBUG', False)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY')

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'home',
    'updates',
    'openhab',  # deactivate the Openhab modul here
    'setter',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'shellyupdater.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates', ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'home.context_processors.openhab_active',
            ],
        },
    },
]

WSGI_APPLICATION = 'shellyupdater.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(env.str('DATABASE_DIR', BASE_DIR), 'db.sqlite3'),
        'OPTIONS': {
            'timeout': 20,
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

# Static Assets DIR
STATICFILES_DIRS = (  # where to find static files
    os.path.join(BASE_DIR, "static-assets"),
)

### LOCAL SETTINGS ARE READ FROM THE .env FILE

# GENERAL
MEDIA_ROOT = env.str('MEDIA_ROOT', BASE_DIR)

# LOGGING
LOG_LEVEL = env.str('LOG_LEVEL', 'INFO')
LOG_LEVEL_DB = env.str('LOG_LEVEL_DB', 'INFO')
LOG_SKIP_STARTSWITH = env.str('LOG_SKIP_STARTSWITH', '')

# MQTT variables for connection
MQTT_BROKER_ADDRESS = env.str('MQTT_BROKER_ADDRESS')
MQTT_USERNAME = env.str('MQTT_USERNAME', None)
MQTT_PASSWORD = env.str('MQTT_PASSWORD', None)
MQTT_SHELLY_ANNOUNCE_TOPIC = env.str('MQTT_SHELLY_ANNOUNCE_TOPIC')
MQTT_SHELLY_COMMAND_TOPIC = env.str('MQTT_SHELLY_COMMAND_TOPIC')
MQTT_SHELLY_BASE_TOPIC = env.str('MQTT_SHELLY_BASE_TOPIC')

#OPENHAB
OPENHAB_REST_BASE_URL = env.str('OPENHAB_REST_BASE_URL')

#GUNICORN START
STARTS_WITH_GUNICORN = env.bool('STARTS_WITH_GUNICORN', False)

# SHELLY-HTTP
HTTP_SHELLY_USERNAME = env.str('HTTP_SHELLY_USERNAME')
HTTP_SHELLY_PASSWORD = env.str('HTTP_SHELLY_PASSWORD')

# SHELLY-UPDATE SETTINGS AND STATUS THRESHOLD
MAX_INFO_DAYS = env.str('MAX_INFO_DAYS', 0)


### LOG SETTINGS

# LOGGING
LOGGING_CONFIG = None
if not os.path.exists(os.path.join(MEDIA_ROOT, "logs")):
    os.makedirs(os.path.join(MEDIA_ROOT, "logs"))
logging.config.dictConfig(
{
    "version": 1,
    "disable_existing_loggers": False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue'
        },
        'skip_logentry_startswith': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': skip_logentry_startswith
        }
    },
    'formatters': {
        'main_formatter': {
            'format': '%(asctime)s - %(levelname)s: %(message)s (%(name)s - %(pathname)s:%(lineno)d - %(process)d)',
            'datefmt': "%Y-%m-%d %H:%M:%S",
        },
        'simple_formatter': {
            'format': '%(asctime)s - %(levelname)s: %(message)s',
            'datefmt': "%Y-%m-%d %H:%M:%S",
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'main_formatter',
            'filters': ['require_debug_true', 'skip_logentry_startswith'],
        },
        'production_file': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(MEDIA_ROOT, "logs", "shellyupdater.log"),
            'maxBytes': 1024 * 1024 * 10,  # 10 MB
            'backupCount': 7,
            'formatter': 'simple_formatter',
            'filters': ['require_debug_false', 'skip_logentry_startswith'],
        },
        'debug_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(MEDIA_ROOT, "logs", "shellyupdater_debug.log"),
            'maxBytes': 1024 * 1024 * 50,  # 50 MB
            'backupCount': 7,
            'formatter': 'simple_formatter',
            'filters': ['require_debug_true','skip_logentry_startswith'],
        },
        'database_file': {
            'level': LOG_LEVEL_DB,
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(MEDIA_ROOT, "logs", "shellyupdater_database.log"),
            'maxBytes': 1024 * 1024 * 50,  # 50 MB
            'backupCount': 7,
            'formatter': 'main_formatter',
            'filters': ['require_debug_false'],
        },
        'null': {
            "class": 'logging.NullHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['mail_admins', 'console', 'production_file', 'debug_file'],
            'level': 'WARNING',
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['database_file'],
            'level': LOG_LEVEL_DB,
        },
        'py.warnings': {
            'handlers': ['null', ],
        },
        '': {
            'handlers': ['console', 'production_file', 'debug_file'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
    }
})